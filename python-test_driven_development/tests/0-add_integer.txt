Testing the `add_integer` function in Python
============================================

This is a doctest file for testing the `add_integer` function in Python.
It provides examples and of how to use the function.

Import file:
------------

.. code-block:: python

    >>> add_integer = __import__('0-add_integer').add_integer

Adding integers:
----------------

.. code-block:: python

    >>> add_integer(40, 2)
    42

    >>> add_integer(40, -2)
    38

    >>> add_integer(-40, 2)
    -38

    >>> add_integer(-40, -2)
    -42

Adding floats:
--------------

.. code-block:: python

    >>> add_integer(40.2, 2.2)
    42

    >>> add_integer(40.2, -2.2)
    38

    >>> add_integer(-40.2, 2.2)
    -38

    >>> add_integer(-40.2, -2.2)
    -42

Adding integer and floats:
--------------------------

.. code-block:: python

    >>> add_integer(2, 40.2)
    42

    >>> add_integer(40.2, -2)
    38

    >>> add_integer(-40.2, 2)
    -38

    >>> add_integer(40.2, 2)
    42

Adding a Single Integer:
------------------------

.. code-block:: python

    >>> add_integer(2)
    100

Adding nothing :)
-----------------

.. code-block:: python

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

Handling Invalid Input:
-----------------------

.. code-block:: python

    >>> add_integer("nan", 42)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(42, "nan")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

    >>> add_integer("nan", "nan")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer("40", "2")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Edge Cases:
-----------

.. code-block:: python

>>> add_integer(2147483647, 1)  # Maximum positive integer
2147483648

>>> add_integer(-2147483648, 1)  # Minimum negative integer
-2147483647

>>> add_integer(0, 0)
0

Other error type:
-----------------

.. code-block:: python

>>> add_integer(float('inf'), 3)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('nan'), 3)
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
